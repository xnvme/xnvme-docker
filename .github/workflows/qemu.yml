#
# Build a debian:bullseye based docker image
# Build qemu/x86_64-softmmu on Debian Bullseye
#  - Containing the qemu-build
#  - Containing latest CIJOE
#  - envs, guests and scripts for CIJOE
#
# Uses the qemu from https://github.com/OpenMPDK/qemu.git branch: 'for-xnvme'
# Uses the latest CIJOE available from PyPI
#
name: qemu

on:
  push:
    branches:
    - 'qemu'

defaults:
  run:
    shell: bash

jobs:

  build-qemu:

    runs-on: ubuntu-latest
    container: debian:bullseye

    steps:
    - name: Prep, 1..4
      run: |
        apt-get -qy update
        apt-get -qy \
          -o "Dpkg::Options::=--force-confdef" \
          -o "Dpkg::Options::=--force-confold" upgrade
        apt-get -qy install \
          apt-utils \
          aptitude \
          pkg-config
        apt-get -qy autoclean

    - name: Prep, 2..4
      run: |
        aptitude -q -y -f install \
        autoconf \
        automake \
        bc \
        bison \
        bridge-utils \
        build-essential \
        ca-certificates \
        cpio \
        flex \
        gawk \
        git \
        rsync

    - name: Prep, 3..4
      run: |
        aptitude -q -y -f install \
        curl \
        file \
        libaio-dev \
        libglib2.0-0 \
        libglib2.0-dev \
        libguestfs-tools \
        liblzo2-dev \
        libpmem-dev \
        libvirt-dev \
        libvirt0 \
        meson \
        ninja-build \
        python3 \
        python3-dev \
        python3-distutils \
        python3-setuptools \
        texinfo \
        uuid-dev

    - name: Prep, 4..4
      run: |
        aptitude -q -y -f install \
        libpixman-1-0 \
        libpixman-1-dev \
        libslirp-dev

    - name: Grab qemu source
      run: |
        git clone --recursive https://github.com/OpenMPDK/qemu.git
        cd qemu
        git checkout for-xnvme

    - name: Configure qemu
      run: |
        mkdir build
        mkdir -p /opt/qemu
        git -C qemu rev-parse --short HEAD > /opt/qemu/docker_tag.txt
        cat /opt/qemu/docker_tag.txt
        cd build
        ../qemu/configure \
            --prefix=/opt/qemu \
            --python=/usr/bin/python3 \
            --audio-drv-list="" \
            --disable-docs \
            --disable-debug-info \
            --disable-opengl \
            --disable-virglrenderer \
            --disable-vte \
            --disable-gtk \
            --disable-sdl \
            --disable-spice \
            --disable-vnc \
            --disable-curses \
            --disable-xen \
            --disable-smartcard \
            --disable-libnfs \
            --disable-libusb \
            --disable-glusterfs \
            --disable-tools \
            --disable-werror \
            --target-list="x86_64-softmmu"

    - name: Build qemu
      run: |
        cd build
        make -j $(nproc)
        make install

    - name: Upload Binaries
      uses: actions/upload-artifact@v2
      with:
        name: qemu-binaries
        path: /opt/qemu

  build-docker:
    needs: build-qemu

    runs-on: ubuntu-latest
    env:
      TAG_DOCKER: latest

    steps:
    - name: Grab sources
      uses: actions/checkout@v2

    - name: Create a docker context
      run: |
        mkdir -p /tmp/docker

    - name: Grab the qemu binaries
      uses: actions/download-artifact@v2
      with:
        name: qemu-binaries
        path: /tmp/docker/qemu

    - name: Build Docker image
      run: |
        cat /tmp/docker/qemu/docker_tag.txt
        TAG_GIT=$(cat /tmp/docker/qemu/docker_tag.txt)
        IMAGE_ID=ghcr.io/${{ github.repository_owner }}/xnvme-qemu
        docker build \
          -t ${IMAGE_ID}:${TAG_GIT} \
          -t ${IMAGE_ID}:${TAG_DOCKER} \
          -f qemu-nvme/Dockerfile \
          /tmp/docker

    - name: Log into GitHub Container Registry
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Push to ghcr.io
      run: |
        IMAGE_ID=ghcr.io/${{ github.repository_owner }}/xnvme-qemu
        docker push ${IMAGE_ID}:${TAG_DOCKER}
